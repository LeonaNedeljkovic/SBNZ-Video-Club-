//created on: May 26, 2020
package com.videoClub.rules.filmRecommendation

import com.videoClub.model.*;
import com.videoClub.model.drl.*;
import com.videoClub.model.enumeration.*;

rule "Reward favourite director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	 $recommendation.directorFavourites($badges) > 0 );
    then
    	$recommendation.setRecommendPoints($points+30*$recommendation.directorFavourites($badges));
        System.out.println("Film: "+ $film.getName() + " acquired " + 
        30*$recommendation.directorFavourites($badges)+ 
        " points for favourite director");
        update($conclusion);
        update($recommendation);
end

rule "Reward favourite scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	 $recommendation.scenaristFavourites($badges) > 0 );
    then
    	$recommendation.setRecommendPoints($points+20*$recommendation.scenaristFavourites($badges));
        System.out.println("Film: "+ $film.getName() + " acquired " + 
        20*$recommendation.scenaristFavourites($badges)+ 
        " points for favourite director");
        update($conclusion);
        update($recommendation);
end

rule "Reward favourite actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	 $recommendation.actorFavourites($badges) > 0 );
    then
    	$recommendation.setRecommendPoints($points+10*$recommendation.actorFavourites($badges));
        System.out.println("Film: "+ $film.getName() + " acquired " + 
        10*$recommendation.actorFavourites($badges)+ 
        " points for favourite actors");
        update($conclusion);
        update($recommendation);
end

rule "Reward highly rated director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	directorBadgeRating($badges) > 3 );
    then
        $recommendation.setRecommendPoints($points+20*$recommendation.directorBadgeRating($badges));
        System.out.println("Film: "+ $film.getName() + " acquired "+
        20*$recommendation.directorBadgeRating($badges)+
        " points for highly rated director");
        update($conclusion);
        update($recommendation);
end

rule "Reward highly rated scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	scenaristBadgeRating($badges) > 3 );
    then
        $recommendation.setRecommendPoints($points+15*$recommendation.scenaristBadgeRating($badges));
        System.out.println("Film: "+ $film.getName() + " acquired "+
        15*$recommendation.scenaristBadgeRating($badges)+
        " points for highly rated director");
        update($conclusion);
        update($recommendation);
end

rule "Reward highly rated actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	actorBadgeRating($badges) > 3 );
    then
        $recommendation.setRecommendPoints($points+5*$recommendation.actorBadgeRating($badges));
        System.out.println("Film: "+ $film.getName() + " acquired " + 
        5*$recommendation.actorBadgeRating($badges)+ 
        " points for highly rated actors");
        update($conclusion);
        update($recommendation);
end

rule "Reward watched director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	directorBadgeWatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points+20*$recommendation.directorBadgeWatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " acquired "+
        20*$recommendation.directorBadgeWatchedReviews($badges)+
        " points for watched films of director");
        update($conclusion);
        update($recommendation);
end

rule "Reward watched scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	scenaristBadgeWatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points+10*$recommendation.scenaristBadgeWatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " acquired "+
        10*$recommendation.scenaristBadgeWatchedReviews($badges)+
        " points for watched films of scenarist");
        update($conclusion);
        update($recommendation);
end

rule "Reward watched actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	actorBadgeWatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points+5*$recommendation.actorBadgeWatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " acquired " + 
        5*$recommendation.actorBadgeWatchedReviews($badges)+ 
        " points for watched films of actors");
        update($conclusion);
        update($recommendation);
end

rule "Punish unwatched director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	directorBadgeUnwatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points-20*$recommendation.directorBadgeUnwatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " lost "+
        20*$recommendation.directorBadgeUnwatchedReviews($badges)+
        " points for unwatched films of director");
        update($conclusion);
        update($recommendation);
end

rule "Punish unwatched scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	scenaristBadgeUnwatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points-10*$recommendation.scenaristBadgeUnwatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " lost "+
        10*$recommendation.scenaristBadgeUnwatchedReviews($badges)+
        " points for unwatched films of scenarist");
        update($conclusion);
        update($recommendation);
end

rule "Punish unwatched actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	actorBadgeUnwatchedReviews($badges) > 0 );
    then
        $recommendation.setRecommendPoints($points-5*$recommendation.actorBadgeUnwatchedReviews($badges));
        System.out.println("Film: "+ $film.getName() + " lost " + 
        5*$recommendation.actorBadgeUnwatchedReviews($badges)+ 
        " points for unwatched films of actors");
        update($conclusion);
        update($recommendation);
end

rule "Punish poorly rated director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	directorBadgeRating($badges) == 3 );
    then
        $recommendation.setRecommendPoints($points-50);
        System.out.println("Film: "+ $film.getName() + " lost "+
        "50 points for poorly rated director");
        update($conclusion);
        update($recommendation);
end

rule "Punish poorly rated scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	scenaristBadgeRating($badges) == 3 );
    then
        $recommendation.setRecommendPoints($points-30);
        System.out.println("Film: "+ $film.getName() + " lost "+
        "30 points for poorly rated scenarist");
        update($conclusion);
        update($recommendation);
end

rule "Punish poorly rated actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	actorBadgeRating($badges) == 3 );
    then
        $recommendation.setRecommendPoints($points-20);
        System.out.println("Film: "+ $film.getName() + " lost " + 
        "20 points for poorly rated actors");
        update($conclusion);
        update($recommendation);
end

rule "Punish horribly rated director"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	directorBadgeRating($badges) < 3 && directorBadgeRating($badges) > 0);
    then
        $recommendation.setRecommendPoints($points-100);
        System.out.println("Film: "+ $film.getName() + " lost "+
        "100 points for horribly rated director");
        update($conclusion);
        update($recommendation);
end

rule "Punish horribly rated scenarist"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	scenaristBadgeRating($badges) < 3 && scenaristBadgeRating($badges) > 0);
    then
        $recommendation.setRecommendPoints($points-70);
        System.out.println("Film: "+ $film.getName() + " lost "+
        "100 points for horribly rated scenarist");
        update($conclusion);
        update($recommendation);
end

rule "Punish horribly rated actors"
	no-loop
	lock-on-active
    when
        $conclusion : UserConclusion( $badges : badges );
        $recommendation : RecommendedFilm( $points : recommendPoints, $film : film,
        	actorBadgeRating($badges) < 3 && actorBadgeRating($badges) > 0);
    then
        $recommendation.setRecommendPoints($points-50);
        System.out.println("Film: "+ $film.getName() + " lost " + 
        "50 points for horribly rated actors");
        update($conclusion);
        update($recommendation);
end

