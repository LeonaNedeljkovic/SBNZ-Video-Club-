//created on: May 30, 2020
package com.videoClub.rules.adminRecommendation

import com.videoClub.dto.MessageDto;
import com.videoClub.model.drl.*;
import com.videoClub.model.*;
import java.util.List;
import java.util.Collections;


global Integer usersNumber;

query actorsRateIsRelevant()
	// veci je broj ArtistRateBadge objekata koji se odnose na listu glumaca filma
	// nego ukupan unwatchedNumber svih ArtistReviewBadge objekata koji se odnose na listu glumaca filma
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numActorsBadges : intValue) from accumulate(
		$artistRateBadge : ArtistRateBadge(this memberOf $artistRateBadges, artist memberOf $film.getActors()),
		count($artistRateBadge));
	Number($numUnwatched : intValue, $numActorsBadges > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist memberOf $film.getActors()),
		count($artistReviewBadge.getUnwatchedNumber()));
end

query highlyRatedActors()
	actorsRateIsRelevant();
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	Number( doubleValue >= 4, $averageRate : doubleValue ) from accumulate(
        	ArtistRateBadge(artist memberOf $film.getActors(),
        			$rate: getAverageDoubleRate() ) from $artistRateBadges,
        	average($rate) )
	// prosek svih averageRate u ArtistRateBadge objektima koji se odnose na listu glumaca filma
	// je veci ili jednak 4
end

query watchedActors()
	highlyRatedActors();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numWatched : intValue) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist memberOf $film.getActors()),
		count($artistReviewBadge.getWatchedNumber()));
	Number($numUnwatched : intValue, $numWatched > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist memberOf $film.getActors()),
		count($artistReviewBadge.getUnwatchedNumber()));
	// gleda se watchedNumber i unwatchedNumber svih ArtistReviewBadge u radnoj memoriji
	// koji se odnose na listu glumaca filma
	// watchedNumber mora biti veci od unwatchedNumber
end

query popularActors()
	watchedActors();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numUnwatched : intValue, $numUnwatched >= usersNumber/2) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist memberOf $film.getActors()),
		count($artistReviewBadge));
	// sabiraju se svi ArtistReviewBadge objekti koji se odnose na listu glumaca iz filma
	// da bi se uslov zadovoljio, mora biti barem 50% ArtistReviewBadge objekata od ukupnog
	// broja korisnika (ukupan broj korisnika predstavljen globalnom prom)
	// posmatraju se SAMO registrovani korisnici
	// postaviti globalnu promeljivu pri inicijalizaciji sesije (velicina liste svih reg korisnika)
end

query goodActors()
	popularActors();
end

//===============================================================================================

query scenaristRateIsRelevant()
	// veci je broj ArtistRateBadge objekata koji se odnose na writtenBy filma
	// nego ukupan unwatchedNumber svih ArtistReviewBadge objekata koji se odnose na writtenBy filma
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numScenaristBadges : intValue) from accumulate(
		$artistRateBadge : ArtistRateBadge(this memberOf $artistRateBadges, artist == $film.getWrittenBy()),
		count(1));
	Number($numUnwatched : intValue, $numScenaristBadges > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getWrittenBy()),
		count($artistReviewBadge.getUnwatchedNumber()));
end

query highlyRatedScenarist()
	scenaristRateIsRelevant();
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	Number( doubleValue >= 4, $averageRate : doubleValue ) from accumulate(
        	ArtistRateBadge(artist == $film.getWrittenBy(),
        			$rate: getAverageDoubleRate() ) from $artistRateBadges,
        	average($rate) )
end

// gleda se watchedNumber i unwatchedNumber svih ArtistReviewBadge u radnoj memoriji
// koji se odnose na writtenBy filma
// watchedNumber mora biti veci od unwatchedNumber
query watchedScenarist()
	highlyRatedScenarist();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numWatched : intValue) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getWrittenBy()),
		count($artistReviewBadge.getWatchedNumber()));
	Number($numUnwatched : intValue, $numWatched > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getWrittenBy()),
		count($artistReviewBadge.getUnwatchedNumber()));
end

query popularScenarist()
	watchedScenarist();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numUnwatched : intValue, $numUnwatched >= usersNumber/2) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges,  artist == $film.getWrittenBy()),
		count($artistReviewBadge));
	// sabiraju se svi ArtistReviewBadge objekti koji se odnose na writtenBy filma
	// da bi se uslov zadovoljio, mora biti barem 50% ArtistReviewBadge objekata od ukupnog
	// broja korisnika (ukupan broj korisnika predstavljen globalnom prom)
	// posmatraju se SAMO registrovani korisnici
	// postaviti globalnu promeljivu pri inicijalizaciji sesije (velicina liste svih reg korisnika)
end

query goodScenarist()
	popularScenarist();
end

//===============================================================================================

// veci je broj ArtistRateBadge objekata koji se odnose na rezisera filma
// nego ukupan unwatchedNumber svih ArtistReviewBadge objekata koji se odnose na rezisera filma
query directorRateIsRelevant()
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numDirectorBadges : intValue) from accumulate(
		$artistRateBadge : ArtistRateBadge(this memberOf $artistRateBadges, artist == $film.getDirector()),
		count(1));
	Number($numUnwatched : intValue, $numDirectorBadges > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getDirector()),
		count($artistReviewBadge.getUnwatchedNumber()));
end


// prosek svih averageRate u ArtistRateBadge objektima koji se odnose na rezisera filma
// je veci ili jednak 4
query highlyRatedDirector()
	directorRateIsRelevant();
	$film : Film();
	$artistRateBadges : List() from collect(ArtistRateBadge());
	Number( doubleValue >= 4, $averageRate : doubleValue ) from accumulate(
        	ArtistRateBadge(artist == $film.getDirector(),
        			$rate: getAverageDoubleRate() ) from $artistRateBadges,
        	average($rate) )
end


// gleda se watchedNumber i unwatchedNumber svih ArtistReviewBadge u radnoj memoriji
// koji se odnose na rezisera filma
// watchedNumber mora biti veci od unwatchedNumber
query watchedDirector()
	highlyRatedDirector();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numWatched : intValue) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getDirector()),
		count($artistReviewBadge.getWatchedNumber()));
	Number($numUnwatched : intValue, $numWatched > $numUnwatched) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges, artist == $film.getDirector()),
		count($artistReviewBadge.getUnwatchedNumber()));
	
end


// sabiraju se svi ArtistReviewBadge objekti koji se odnose na rezisera filma
// da bi se uslov zadovoljio, mora biti barem 50% ArtistReviewBadge objekata od ukupnog
// broja korisnika (ukupan broj korisnika predstavljen globalnom prom)
// posmatraju se SAMO registrovani korisnici
// postaviti globalnu promeljivu pri inicijalizaciji sesije (velicina liste svih reg korisnika)
query popularDirector()
	watchedDirector();
	$film : Film();
	$artistReviewBadges : List() from collect(ArtistReviewBadge());
	Number($numUnwatched : intValue, $numUnwatched >= usersNumber/2) from accumulate(
		$artistReviewBadge : ArtistReviewBadge(this memberOf $artistReviewBadges,  artist == $film.getDirector()),
		count($artistReviewBadge));
end

query goodDirector()
	popularDirector();
end

rule "Film will be successfull"
    when
    	$m : MessageDto (  );
        goodDirector() and goodScenarist() and goodActors()
    then
    	$m.setMessage("Film will be successfull");
    	$m.setResult("Film will be successfull");
end

rule "Film might be successfull"
    when
    	$m : MessageDto (  );
        goodDirector() or goodScenarist() or goodActors()
    then
    	$m.setMessage("Film might be successfull");
    	$m.setResult("Users like watching some artists in this film, so, this film may be popular.");
end

rule "Film wont be successfull"
    when
    	$m : MessageDto (  );
        not goodDirector() and not goodScenarist() and not goodActors()
    then
    	$m.setMessage("Film wont be successfull");
    	$m.setResult("Neither director nor scenarist nor actors are popular on this platform, so, don't expect too much from this film.");
end
