//created on: May 30, 2020
package com.videoClub.rules.adminRecommendation

import com.videoClub.dto.MessageDto;
import com.videoClub.model.drl.*;
import com.videoClub.model.*;
import com.videoClub.model.enumeration.*;
import java.util.List;
import java.util.Collections;


//broj nepogledanih filmova datog zanra mora biti manji od broja
//pogledanih i ocenjenih filmova tog zanra
query watchedGenre()
	$reviews : List() from collect(Review());
	$artist: Artist();
	$genre : Genre();
	Number($unwatchedFilmsFromGenre : intValue) from accumulate(
		$review : Review($film: film, $artist memberOf $film.getActors(), watched == false) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($watchedAndRatedFilmsFromGenre : intValue, $watchedAndRatedFilmsFromGenre > $unwatchedFilmsFromGenre) from accumulate(
		$review : Review($film: film, $film.getGenre() == $genre, watched == true, rate != 0) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
	
end

//koja je prosecna ocena filmova datog zanra
//da bi bilo zadovoljeno mora biti >= 3.5
query higlyRatedGenre()
	$films : List() from collect(Film());
	$genre : Genre();
	Number( doubleValue >= 3.5, $averageRate : doubleValue ) from accumulate(
        	Film($genre == genre,
        			$rating: rating ) from $films,
        	average($rating) )
end


//posmatramo da li postoji bar jedan film datog zanra ocenjen ocenom >=4
query popularGenre()
	higlyRatedGenre() or watchedGenre();
	$genre : Genre();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($rateFive:intValue, $rateFive > 0) from accumulate(
		$film : Film($genre == genre, rating >= 4 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end



//===============================================================================================

query watchedActors()
	$reviews : List() from collect(Review());
	$artist: Artist();
	Number($unwatchedFilmsFromActor : intValue) from accumulate(
		$review : Review($film: film, $artist memberOf $film.getActors(), watched == false) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($watchedAndRatedFilmsFromActor : intValue, $watchedAndRatedFilmsFromActor > $unwatchedFilmsFromActor) from accumulate(
		$review : Review($film: film, $artist memberOf $film.getActors(), watched == true, rate != 0) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
	
end

//manje je filmova u kojima je artist glumio ocenjenih ocenom <= 3
//nego onih koji su ocenjeni ocenom >= 4
query highlyRatedActors()
	watchedActors();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($ratedLessEqualThree : intValue) from accumulate(
		$film : Film($artist memberOf getActors(), rating <= 3 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($ratedGraterEqualFour : intValue, $ratedGraterEqualFour > $ratedLessEqualThree) from accumulate(
		$film : Film($artist memberOf getActors(), rating >= 4  ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end


//posmatramo da li postoji bar jedan artist koji je glumio u filmu koji je ocenjen ocenom >=4
query popularActors()
	highlyRatedActors();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($rateFive:intValue, $rateFive > 0) from accumulate(
		$film : Film($artist memberOf getActors(), rating >= 4 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end

//===============================================================================================


//postoji artist u novom filmu koji je napisao scenario za neki od filmova u sistemu
// koju su vise puta odgledani i ocenjeni
//nego neodgledani
query watchedScenarist()
	$reviews : List() from collect(Review());
	$artist: Artist();
	Number($unwatchedFilmsFromScenarist : intValue) from accumulate(
		$review : Review($film : film, $artist==$film.getWrittenBy(), watched == false) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($watchedAndRatedFilmsFromScenarist : intValue, $watchedAndRatedFilmsFromScenarist > $unwatchedFilmsFromScenarist) from accumulate(
		$review : Review($film : film, $artist==$film.getWrittenBy(), watched == true, rate != 0) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
end

//manje je filmova za koje je artist pisao scenario ocenjenih ocenom <= 3
//nego onih koji su ocenjeni ocenom >= 4
query highlyRatedScenarist()
	watchedScenarist();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($ratedLessEqualThree : intValue) from accumulate(
		$film : Film($writtenBy: writtenBy, $artist == $writtenBy, $rating : rating, $rating <= 3 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($ratedGraterEqualFour : intValue, $ratedGraterEqualFour > $ratedLessEqualThree) from accumulate(
		$film : Film($writtenBy: writtenBy, $artist == $writtenBy, $rating : rating, $rating >= 4 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end

// posmatramo da li postoji bar jedan artist koji je kreirao scenario za film koji je ocenjen ocenom >=4

query popularScenarist()
	highlyRatedScenarist();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($rateFive:intValue, $rateFive > 0) from accumulate(
		$film : Film($artist == writtenBy, rating >= 4  ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end


//===============================================================================================

//postoji artist u novom filmu koji je rezirao neke od filmova u sistemu
// koju su vise puta odgledani i ocenjeni
//nego neodgledani
query watchedDirector()
	$reviews : List() from collect(Review());
	$artist: Artist();
	Number($unwatchedFilmsFromDirector : intValue) from accumulate(
		$review : Review($film: film, $artist == $film.getDirector(), watched == false) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($watchedAndRatedFilmsFromDirector : intValue, $watchedAndRatedFilmsFromDirector > $unwatchedFilmsFromDirector) from accumulate(
		$review : Review($film: film, $artist == $film.getDirector(), watched == true, rate != 0) from $reviews,
		init(int count = 0;),
        	action(count += 1;),
        	result(count));
end


//manje je filmova koje je artist rezirao ocenjenih ocenom <= 3
//nego onih koji su ocenjeni ocenom >= 4
query highlyRatedDirector()
	watchedDirector();
	$films : List() from collect(Film());
	$artist : Artist();
	Number($ratedLessEqualThree : intValue) from accumulate(
		$film : Film($artist == director, rating <= 3.0 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
    Number($ratedGraterEqualFour : intValue, $ratedGraterEqualFour > $ratedLessEqualThree) from accumulate(
		$film : Film($artist == director, rating >= 4.0 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
	
end


// posmatramo da li postoji bar jedan artist koji je rezirao neki film u sistemu koji je ocenjen ocenom >=4
query popularDirector()
 	highlyRatedDirector()
	$films : List() from collect(Film());
	$artist : Artist();
	Number($rateFive:intValue, $rateFive > 0) from accumulate(
		$film : Film($artist == director, rating == 5 ) from $films,
			init(int count = 0;),
        	action(count += 1;),
        	result(count));
end


query popularArtistExists()
	popularDirector() or popularScenarist() or popularActors()
end 

rule "Film has good elements"
	when
		$m : MessageDto();
		popularGenre() or popularArtistExists()
	then
		$m.setMessage("Film has good elements");
		$m.setResult("Film has good elements");
end


rule "Film doesn't have good elements"
	when
		$m : MessageDto();
		not popularGenre() and not popularArtistExists()
	then
		$m.setMessage("Film doesn't have good elements");
		$m.setResult("Film doesn't have good elements");
end






